// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?

  // Relations
  wallet       Wallet?
  trades       Trade[]
  transactions Transaction[]
  withdrawals  Withdrawal[]
  bankAccount  BankAccount?
  accounts     Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Wallet {
  id        String   @id @default(cuid())
  userId    String   @unique
  balance   Int      @default(100) // Default balance set to 100
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("wallets")
}

model BankAccount {
  id            String   @id @default(cuid())
  userId        String   @unique
  accountNumber String
  ifscCode      String
  bankName      String
  accountHolder String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  withdrawals Withdrawal[]

  @@map("bank_accounts")
}

model Transaction {
  id          String            @id @default(cuid())
  userId      String
  walletId    String
  type        TransactionType
  amount      Int               @db.Integer
  description String?
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Withdrawal {
  id            String           @id @default(cuid())
  userId        String
  bankAccountId String
  amount        Int              @db.Integer
  status        WithdrawalStatus @default(PENDING)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankAccount BankAccount @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)

  @@map("withdrawals")
}

model Trade {
  id        String      @id @default(cuid())
  userId    String
  color     TradeColor // The color user bet on
  number    Int         @db.Integer // The number user bet on
  amount    Int         @db.Integer
  result    TradeResult
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("trades")
}

// Enums
enum TransactionType {
  DEPOSIT // User adds money to wallet
  WITHDRAWAL // User withdraws money from wallet
  WIN // User wins from a trade
  LOSS // User loses from a trade
  BONUS // Bonus or promotional credits
  REFUND // Refund for cancelled trades
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum WithdrawalStatus {
  PENDING
  PROCESSING
  COMPLETED
  REJECTED
  CANCELLED
}

enum TradeResult {
  WIN
  LOSS
  PENDING
  CANCELLED
}

enum TradeColor {
  RED
  VIOLET
  GREEN
}

